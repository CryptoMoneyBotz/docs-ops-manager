---
title: Installing PCF on AWS Manually
owner: Ops Manager
---

<%= partial '/pcf/deprecation-notice' %>

<strong><%= modified_date %></strong>

This topic describes how to manually configure the Amazon Web Services (AWS) components that you need to run [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) on AWS.

To deploy PCF on AWS, you must perform the procedures in this topic to create objects in the AWS Management Console that PCF requires. 

To view the list of AWS objects created by the procedures in this topic, see the [Required AWS Objects](#required-objects) section. 

After completing the procedures in this topic, proceed to [Configuring BOSH Director on AWS](config-manual.html) to continue deploying PCF.


## <a id='file-ticket'></a> Step 1: File a Ticket

Log in to the AWS Management Console, and file a ticket with Amazon to ensure that your account can launch more than the default 20 instances. In the ticket, ask for a limit of 50 `t2.micro` instances and 20 `c4.large` instances in the region you are using. 

<p class="note"><strong>Note:</strong> To deploy PCF to AWS GovCloud (US), log in to the <a href="https://console.amazonaws-us-gov.com/">AWS GovCloud (US) Console</a> instead of the standard AWS Management Console and select the <code>us-gov-west-1</code> region.</p>

<p class="note"><strong>Note</strong>: To deploy PCF to AWS China, set up an <a href="http://www.amazonaws.cn/en/products/">AWS China</a> account and contact the Platform Architect assigned for your Pivotal account.</p>

You can check the limits on your account by visiting the EC2 Dashboard on the AWS Management Console and clicking <strong>Limits</strong> on the left navigation.


## <a id='create-s3'></a> Step 2: Create S3 Buckets

1. Navigate to the S3 Dashboard.
	<p class="note"><strong>Note:</strong>S3 bucket names must be globally unique. When naming buckets, Pivotal recommends that you prefix the generic names below with an unique and helpfully identifiable string (i.e. ID-STRING-pcf-ops-manager-bucket, MY-IDENTIFIER-pcf-buildpacks-bucket, and so on). Then you should use the same prefix when naming other associated resources, such as IAM policies.</p>

1. Perform the following steps to create five S3 buckets:
  * Click **Create Bucket**
  * For **Bucket name**, enter `ID-STRING-pcf-ops-manager-bucket`. 
  * For **Region**, select your region.
  * Click **Next** three times.
  * Click **Create bucket**.
  * Repeat the above steps to create four more S3 buckets: `ID-STRING-pcf-buildpacks-bucket`, `ID-STRING-pcf-packages-bucket`, `ID-STRING-pcf-resources-bucket`, and `ID-STRING-pcf-droplets-bucket`.


## <a id='create-iam'></a> Step 3: Create an IAM User for PCF

Perform the following steps to create an Amazon Identity and Access Management (IAM) user with the minimal permissions necessary to run and install PCF:

1. Click **IAM** to access the IAM Dashboard.

1. Click **Users** and then click **Add user**.   

     <%= image_tag("../common/images/pcfaws/aws_iam_username.png") %>

1. Enter a user name, such as `pcf-user`.

1. For AWS access type, select **Programmatic access**.
    <p class="note"><strong>Note:</strong> If you prefer to create your keys locally and import them into AWS, see the [Amazon documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html).</p>

1. Click **Next: Permissions**.

1. Click **Next: Review** and review your choices.
    <p class="note"><strong>Note:</strong> On the <b>Review</b> page you may see a warning that the user has no permissions. You can disregard this message. You do not need to set user permissions.</p>

1. Click **Create user**.

1. Click **Download .csv** to download the user security credentials.
    <p class="note warning"><strong>WARNING:</strong> The <code>credentials.csv</code> contains the IDs for your user security access key and secret access key. Keep the <code>credentials.csv</code> file for your currently active key pairs in a secure directory. You cannot recover a lost key pair.</p>

1. Click **Close**.

1. On the **Users** page, click the user name to access the user details page.
    <p class="note"><strong>Note:</strong> On the <b>Users</b> page you may see a warning that the user has no permissions. You can disregard this message. You do not need to set user permissions.</p>

1. Click **Add inline policy**. You can review your existing inline policies by clicking the down arrow.

     <%= image_tag("../common/images/pcfaws/aws_iam_json.png") %>

1. On the **Create policy** page, define a policy: 

   1. Copy the policy document included in the [Pivotal Cloud Foundry for AWS Policy Document](https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/customizing/policy-doc.html) topic. You must edit the policy document so the names of the S3 buckets match the ones you created in [Step 2: Create S3 Buckets](#create-s3).

   1. Paste the policy document into the **JSON** tab on the **Create policy** page. 

1. Click **Review policy**.

1. In the **Name** field, enter `pcf-iam-policy`.

1. Click **Create policy**. The **Summary** page displays a list of available policies and actions.


## <a id='pcfaws-vpc'></a> Step 4: Create a VPC

1. Navigate to the VPC Dashboard.

1. Click **Start VPC Wizard**.

    <%= image_tag("../common/images/pcfaws/pcf_aws_vpc_wizard.png") %>

1. Select **VPC with Public and Private Subnets** and click **Select**.

    <%= image_tag("../common/images/pcfaws/pcf_aws_vpc_config.png") %>

1.  <a id="vpc-details"></a>Specify the following details for your VPC:
    * **IPv4 CIDR block**: Enter `10.0.0.0/16`.
    * **IPv6 CIDR block**: Select **No IPv6 CIDR Block**.
    * **VPC name**: `pcf-vpc`.
    * **Public subnet's IPv4 CIDR**: Enter `10.0.0.0/24`.
    * Set the **Availability Zone** fields for both subnets to `REGION-#a`. For example, **us-west-2a**.
    * **Public subnet name**: Enter `pcf-public-subnet-az0`.
    * **Private subnet's IPv4 CIDR**: Enter `10.0.16.0/28`.
    * **Private subnet name**: Enter `pcf-management-subnet-az0`.
    * Click **Use a NAT instance instead** and do the following:
      * Under **Specify the details of your NAT instance**, set the **Instance type** to **t2.medium**
      * Create a key pair titled `pcf-ops-manager-key`. For more information about creating the key pair, see [Amazon EC2 Key
    Pairs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the AWS documentation.
      * Select your newly-created `pcf-ops-manager-key` for the **Key Pair name**.
    * **Enable DNS hostnames**: Click **Yes**.
    * **Hardware tenancy**: Select **Default**.
    * Click **Create VPC**.

1. After the VPC is successfully created, click **Subnets** in the left navigation.

1. Click **Create Subnet**.

1. Add the following subnets to the `pcf-vpc` VPC:
     <p class="note"><strong>Note:</strong> You created the first two subnets in the previous step: <code>pcf-public-subnet-az0</code> and <code>pcf-management-subnet-az0</code>.</p>

     <table>
     <tr>
       <th>Name</th>
       <th>AZ</th>
       <th>IPv4 CIDR block</th>
     </tr>
     <tr>
       <td>`pcf-public-subnet-az1`</td>
       <td>`REGION-#b` (for example, `us-west-2b`)</td>
       <td>`10.0.1.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-public-subnet-az2`</td>
       <td>`REGION-#c` (for example, `us-west-2c`)</td>
       <td>`10.0.2.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-management-subnet-az1`</td>
       <td>`REGION-#b` (for example, `us-west-2b`)</td>
       <td>`10.0.16.16/28`</td>
     </tr>
     <tr>
       <td>`pcf-management-subnet-az2`</td>
       <td>`REGION-#c` (for example, `us-west-2c`)</td>
       <td>`10.0.16.32/28`</td>
     </tr>
     <tr>
       <td>`pcf-ert-subnet-az0`</td>
       <td>`REGION-#a` (for example, `us-west-2a`)</td>
       <td>`10.0.4.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-ert-subnet-az1`</td>
       <td>`REGION-#b` (for example, `us-west-2b`)</td>
       <td>`10.0.5.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-ert-subnet-az2`</td>
       <td>`REGION-#c` (for example, `us-west-2c`)</td>
       <td>`10.0.6.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-services-subnet-az0`</td>
       <td>`REGION-#a` (for example, `us-west-2a`)</td>
       <td>`10.0.8.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-services-subnet-az1`</td>
       <td>`REGION-#b` (for example, `us-west-2b`)</td>
       <td>`10.0.9.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-services-subnet-az2`</td>
       <td>`REGION-#c` (for example, `us-west-2c`)</td>
       <td>`10.0.10.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-rds-subnet-az0`</td>
       <td>`REGION-#a` (for example, `us-west-2a`)</td>
       <td>`10.0.12.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-rds-subnet-az1`</td>
       <td>`REGION-#b` (for example, `us-west-2b`)</td>
       <td>`10.0.13.0/24`</td>
     </tr>
     <tr>
       <td>`pcf-rds-subnet-az2`</td>
       <td>`REGION-#c` (for example, `us-west-2c`)</td>
       <td>`10.0.14.0/24`</td>
     </tr>
     </table>


##<a id='pcfaws-om-secgrp'></a> Step 5: Configure a Security Group for Ops Manager

1. Return to the EC2 Dashboard.

1. Select **Security Groups>Create Security Group**.

1. For **Security group name**, enter `pcf-ops-manager-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy Ops Manager.

1. Click the **Inbound** tab and add rules according to the table below.
    <p class="note"><strong>Note:</strong> Pivotal recommends limiting access to Ops Manager to IP ranges within your organization, but you may relax the IP restrictions after configuring authentication for Ops Manager.</p>

    <table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th><strong>Source</strong></th>
</tr>
<tr>
  <td>HTTP</td>
  <td>TCP</td>
  <td>80</td>
  <td>My IP</td>
</tr>
<tr>
  <td>HTTPS</td>
  <td>TCP</td>
  <td>443</td>
  <td>My IP</td>
</tr>
<tr>
  <td>SSH</td>
  <td>TCP</td>
  <td>22</td>
  <td>My IP</td>
</tr>
<tr>
  <td>BOSH Agent</td>
  <td>TCP</td>
  <td>6868</td>
  <td>10.0.0.0/16</td>
</tr>
<tr>
  <td>BOSH Director</td>
  <td>TCP</td>
  <td>25555</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

1. Click **Create**.


## <a id='pcfaws-om-ersecgrp'></a> Step 6: Configure a Security Group for PCF VMs

1. From the **Security Groups** page, click **Create Security Group** to create another security group.

1. For **Security group name**, enter `pcf-vms-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy the PCF VMs.

1. Click the **Inbound** tab and add rules for all traffic from your public and private subnets to your private subnet, as the table and image show.
    This rule configuration does the following:
    * Enables BOSH to deploy PAS and other services.
    * Enables application VMs to communicate through the router.
    * Allows the load balancer to send traffic to Pivotal Application Service (PAS).

    <table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>0 - 65535</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

1. Click **Create**.

    <%= image_tag("../common/images/pcfaws/pcf_aws_secgrp_er.png") %>


## <a id='pcfaws-om-elbsecgrp'></a> Step 7: Configure a Security Group for the Web ELB

1. From the **Security Groups** page, click **Create Security Group** to create another security group.

1. For **Security group name**, enter `pcf-web-elb-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy this Elastic Load Balancer (ELB).

1. Click the **Inbound** tab and add rules to allow traffic to ports `80`, `443`, and `4443` from `0.0.0.0/0`, as the table and image show.
    <p class="note"><b>Note</b>: Allow traffic to port `4443` only if you are in an AWS cloud region that does not support AWS ALBs. For example, the GovCloud region. For more information about AWS regoins and availability zones, see <a href="https://aws.amazon.com/about-aws/global-infrastructure/">AWS Global Infrastructure</a>.</p>

    <p class="note"><b>Note</b>: For finer control over what can reach PAS, change <code>0.0.0.0/0</code> to be more restrictive. This security group governs external access to PAS from apps such as the cf CLI and app URLs.</p>

    <table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>4443</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>HTTP</td>
  <td>TCP</td>
  <td>80</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>HTTPS</td>
  <td>TCP</td>
  <td>443</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

1. Click **Create**.

    <%= image_tag("../common/images/pcfaws/configure-security-group.png") %>


## <a id='pcfaws-om-sshelbsecgrp'></a> Step 8: Configure a Security Group for the SSH ELB

1. From the **Security Groups** page, click **Create Security Group** to create another security group.

1. For **Security group name**, enter `pcf-ssh-elb-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy this ELB.

1. Click the **Inbound** tab and add the following rule:
    <table border="1" class="nice" >
    <tr>
      <th><strong>Type </strong></th>
      <th><strong>Protocol</strong></th>
      <th><strong>Port Range</strong></th>
      <th colspan='2'><strong>Source</strong></th>
    </tr>
    <tr>
      <td>Custom TCP rule</td>
      <td>TCP</td>
      <td>2222</td>
      <td>Anywhere</td>
      <td>0.0.0.0/0</td>
    </tr>
    </table>

1. Click **Create**.


## <a id='pcfaws-om-tcpelbsecgrp'></a> Step 9: Configure a Security Group for the TCP ELB

1. From the **Security Groups** page, click **Create Security Group** to create another security group.

1. For **Security group name**, enter `pcf-tcp-elb-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy this ELB.

1. Click the **Inbound** tab and add the following rule:
    <table border="1" class="nice" >
    <tr>
      <th><strong>Type </strong></th>
      <th><strong>Protocol</strong></th>
      <th><strong>Port Range</strong></th>
      <th colspan='2'><strong>Source</strong></th>
    </tr>
    <tr>
      <td>Custom TCP rule</td>
      <td>TCP</td>
      <td>1024 - 1123</td>
      <td>Anywhere</td>
      <td>0.0.0.0/0</td>
    </tr>
    </table>

1. Click **Create**.


## <a id='pcfaws-om-natsecgrp'></a> Step 10: Configure a Security Group for the Outbound NAT

1. From the **Security Groups** page, click **Create Security Group** to create another security group.

1. For **Security group name**, enter `pcf-nat-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy the Outbound NAT.

1. Click the **Inbound** tab and add a rule to allow all traffic from your VPCs, as the table and image show.

    <table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

1. Click **Create**.

    <%= image_tag("../common/images/pcfaws/pcf_aws_secgrp_nat.png") %>


## <a id='pcfaws-om-mysqlsecgrp'></a> Step 11: Configure a Security Group for MySQL

<p class="note"><strong>Note:</strong> If you plan to use an internal database, skip this step. If you are using RDS, you must configure a security group that enables the Ops Manager VM and BOSH Director VM to access the database.</p>

1. From the **Security Groups** page, click **Create Security Group** to create another security group.

1. For **Security group name**, enter `pcf-mysql-security-group`.

1. For **Description**, enter a description to identify this security group.

1. For **VPC**, select the VPC where you want to deploy MySQL.

1. Click the **Inbound** tab. Add a rule of type `MySQL` and specify the subnet of your VPC in **Source**, as the table and image show.
    <table border="1" class="nice" >
    <tr>
      <th><strong>Type </strong></th>
      <th><strong>Protocol</strong></th>
      <th><strong>Port Range</strong></th>
      <th colspan='2'><strong>Source</strong></th>
    </tr>
    <tr>
      <td>MySQL</td>
      <td>TCP</td>
      <td>3306</td>
      <td>Custom IP</td>
      <td>10.0.0.0/16</td>
    </tr>
    </table>

1. Click the **Outbound** tab. Add a rule of type `All traffic` and specify the subnet of your VPC in **Destination**, as the table and image show.
    <table border="1" class="nice" >
    <tr>
      <th><strong>Type </strong></th>
      <th><strong>Protocol</strong></th>
      <th><strong>Port Range</strong></th>
      <th colspan='2'><strong>Destination</strong></th>
    </tr>
    <tr>
      <td>All traffic</td>
      <td>All</td>
      <td>All</td>
      <td>Custom IP</td>
      <td>10.0.0.0/16</td>
    </tr>
    </table>

1. Click **Create**.

    <%= image_tag("../common/images/pcfaws/pcf_aws_secgrp_mysql.png") %>


## <a id='pcfaws-om-ami'></a> Step 12: Launch an Ops Manager AMI

To launch an Amazon Machine Image (AMI) for Ops Manager, do the following:

1. Navigate to the **Pivotal Cloud Foundry Operations Manager** section of [Pivotal Network](https://network.pivotal.io/products/ops-manager).

1. Select the version of PCF you want to install from the **Releases** dropdown.

1. In the **Release Download Files**, click the file named **Pivotal Cloud Foundry Ops Manager for AWS** to download a PDF.

1. Open the PDF and identify the AMI ID for your region.


1. Return to the EC2 Dashboard.

1. Click **AMIs** from the **Images** menu. 

1. Select **Public images** from the drop-down filter that says **Owned by me**.

1. Paste the AMI ID for your region into the search bar and press enter.
    <p class="note"><strong>Note:</strong> There is a different AMI for each region. If you cannot locate the AMI for your region, verify that you have set your AWS Management Console to your desired region. If you still cannot locate the AMI, log in to the <a href="https://network.pivotal.io">Pivotal Network</a> and file a support ticket.</p>

    <%= image_tag("../common/images/pcfaws/pcf_aws_ami.png") %>

1. (Optional) If you want to encrypt the VM that runs Ops Manager with AWS Key Management Service (KMS), perform the following additional steps:
  1. Right click the row that lists your AMI and click **Copy AMI**.
  1. Select your **Destination region**.
  1. Enable **Encryption**. For more information about AMI encryption, see [Encryption and AMI Copy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html#ami-copy-encryption) from the *Copying an AMI* topic in the AWS documentation.
  1. Select your **Master Key**. To create a new custom key, see [Creating Keys](https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html) in the AWS documentation.
  1. Click **Copy AMI**. You can use the new AMI you copied for the following steps.

1. Select the row that lists your Ops Manager AMI and click **Launch**.

1. Choose **m5.large** for your instance type and click **Next: Configure Instance Details**.

    <%= image_tag("../common/images/pcfaws/aws_ami_m5large.png") %>

1. Configure the following for your instance:
    * **Network**: Select the VPC that you created.
    * **Subnet**: Select `pcf-public-subnet-az0`.
    * **Auto-assign for Public IP**: Select **Enable**.
    * **IAM role**: Select the IAM role associated with your pcf-user profile. If you have not created one, click **Create new IAM role** and follow the [Guidelines for Creating User Roles on AWS](https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/customizing/aws-iaas-user-roles.html).
    * For all other fields, accept the default values.

    <%= image_tag("../common/images/pcfaws/pcf_aws_configure_instance.png") %>

1. Click **Next: Add Storage** and adjust the **Size (GiB)** value.
The default persistent disk value is 50&nbsp;GB. Pivotal recommends increasing this value to a minimum of 100&nbsp;GB.

    <%= image_tag("../common/images/pcfaws/pcf_aws_add_storage.png") %>

1. Click **Next: Tag Instance** 

1. On the **Add Tags** page, add a tag with the key `Name` and value `pcf-ops-manager`. 

1. Click **Next: Configure Security Group**.

1. Select the `pcf-ops-manager-security-group` that you created in [Step 5: Configure a Security Group for Ops Manager](#pcfaws-om-secgrp).

1. Click **Review and Launch** and confirm the instance launch details.

1. Click **Launch**.

1. Select the `pcf-ops-manager-key` key pair, confirm that you have access to the private key file, and click **Launch Instances**. You use this key pair to access the Ops Manager VM.

    <%= image_tag("../common/images/pcfaws/select_pcfpem_keypair.png") %>

1. Click **View Instances** to access the **Instances** page on the EC2 Dashboard.


##<a id='pcfaws-web-lb'></a> Step 13: Create Web Load Balancer

1. On the EC2 Dashboard, click **Load Balancers**.

1. Click **Create Load Balancer**. 

1. Under **Application Load Balancer**, click **Create**.

1. For **Step 1: Configure Load Balancer**, do the following:
  1. Under **Basic Configuration**, do the following:
      * For **Name**, enter `pcf-web-elb`.
      * For **Scheme**, select **internet-facing** to allow traffic from public IP addresses, or **internal** to allow traffic only from private IP addresses.
      * For **IP address type**, select the type of IP addresses you want to allow.
  1. Under **Listeners**, click **Add listener**. For **Load Balancer Protocol**, select **HTTPS**.
  1. Under **Availability Zones**, select all availability zones.
  1. Click **Next: Configure Security Settings**.

1. For **Step 2: Configure Security Settings**, do the following:
  1. Under **Select default certificate**, do one of the following:
      - If you already have a certificate from AWS Certificate Manager (ACM), select **Choose a certicate from ACM**.
      - If you do not have a certificate from ACM, select **Upload a certificate to ACM**. For more information, see [Importing Certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the AWS documentation.
        <p class="note"><strong>Note:</strong> For a production or production-like environment, use a certificate from a Certificate Authority (CA). This can be an internal certificate or a purchased certificate. For a sandbox environment, you can use a self-signed certificate.</p>
  1. For **Certificate Name**, select the desired certificate.
  1. For **Security Policy**, select the policy you created in [Step 3: Create an IAM User for PCF](#create-iam).
  1. Click **Next: Configure Security Groups**.

1. For **Step 3: Configure Security Groups**, do the following:
  1. Under **Assign a security group**, select **Select an existing security group**. 
  1. From the list of security groups, select the `pcf-web-elb-security-group` security group that you configured in [Step 7: Configure a Security Group for the Web ELB](#pcfaws-om-elbsecgrp).
  1. Click **Next: Configure Routing**.

1. For **Step 4: Configure Routing**, do the following:
  1. Under **Target Group**, enter the following values:
      - **Name**: Enter `pcf-web-elb-target-group`.
      - **Protocol**: Select **HTTP**.
  1. Under **Health checks**, set **Path** to `/health`. 
  1. Under **Advanced health check settings**, enter the following values:
      - **Port**: Set to `8080`. 
      - **Interval**: Set to `5` seconds. 
      - **Timeout**: Set to `3` seconds.
      - **Unhealthy threshold**: Set to `3`.
      - **Health threshold**: Set to `6`.
  1. Click **Next: Register Targets**. 

1. For **Step 5: Register Targets**, accept the default values and click **Next: Review**.

1. For **Step 6: Review**, review the load balancer details and then click **Create**. A message appears to confirm AWS successfully created the load balancer.

## <a id='pcfaws-ssh-lb'></a> Step 14: Create SSH Load Balancer

1. From the **Load Balancers** page, click **Create Load Balancer**. 

1. Select **Classic Load Balancer**. 

1. Configure the load balancer with the following information:
    * **Load Balancer name**: Enter `pcf-ssh-elb`.
    * **Create LB Inside**: Select the `pcf-vpc` VPC that you created in [Step 4: Create a VPC](#pcfaws-vpc).
    * Ensure that the **Create an internal load balancer** checkbox is not selected.
    <%= image_tag("../common/images/pcfaws/config_elb.png") %>

1. Under **Listener Configuration**, add the following rules:

    <table border="1" class="nice" >
    <tr>
      <th><strong>Load Balancer Protocol</strong></th>
      <th><strong>Load Balancer Port</strong></th>
      <th><strong>Instance Protocol</strong></th>
      <th><strong>Instance Port</strong></th>
    </tr>
    <tr>
      <td>TCP</td>
      <td>2222</td>
      <td>TCP</td>
      <td>2222</td>
    </tr>
    </table>

1. Under **Select Subnets**, select the public subnets you configured in [Step 4: Create a VPC](#pcfaws-vpc), and click **Next: Assign Security Groups**.

1. On the **Assign Security Groups** page, select the security group `pcf-ssh-elb-security-group` you configured in [Step 8: Configure a Security Group for the SSH ELB](#pcfaws-om-sshelbsecgrp), and click **Next: Configure Security Settings**.

    <%= image_tag("../common/images/pcfaws/lb_assign_sec_groups.png") %>

1. On the **Configure Security Settings** page, ignore the **Improve your load balancer's security** error message and click **Next: Configure Health Check**.

1. On the **Configure Health Check** page, enter the following values:
  * **Ping Protocol**: Select `TCP`.
  * **Ping Port**: Set to `2222`. 
  * **Interval**: Set to `5` seconds. 
  * **Response Timeout**: Set to `3` seconds.
  * **Unhealthy threshold**: Set to `3`.
  * **Health threshold**: Set to `6`.

1. Click **Next: Add EC2 Instances**.

    <%= image_tag("../common/images/pcfaws/lb_health_check.png") %>

1. Accept the defaults on the **Add EC2 Instances** page and click **Next: Add Tags**.

1. Accept the defaults on the **Add Tags** page and click **Review and Create**.

1. Review and confirm the load balancer details, and click **Create**.


## <a id='pcfaws-tcp-lb'></a> Step 15: Create TCP Load Balancer

1. From the **Load Balancers** page, click **Create Load Balancer**. 

1. Select **Classic Load Balancer**. 

1. Configure the load balancer with the following information:
    * **Load Balancer name**: Enter `pcf-tcp-elb`.
    * **Create LB Inside**: Select the `pcf-vpc` VPC that you created in [Step 4: Create a VPC](#pcfaws-vpc).
    * Ensure that the **Create an internal load balancer** checkbox is not selected.

    <%= image_tag("../common/images/pcfaws/config_elb.png") %>

1. Under **Listener Configuration**, add the following rules:

    <table border="1" class="nice" >
    <tr>
      <th><strong>Load Balancer Protocol</strong></th>
      <th><strong>Load Balancer Port</strong></th>
      <th><strong>Instance Protocol</strong></th>
      <th><strong>Instance Port</strong></th>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1024</td>
      <td>TCP</td>
      <td>1024</td>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1025</td>
      <td>TCP</td>
      <td>1025</td>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1026</td>
      <td>TCP</td>
      <td>1026</td>
    </tr>
    <tr>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1123</td>
      <td>TCP</td>
      <td>1123</td>
    </tr>
    </table>

      <br>
      The `...` entry above indicates that you must add listening rules for each port between 1026 and 1123.

1. Under **Select Subnets**, select the public subnets you configured in [Step 4: Create a VPC](#pcfaws-vpc), and click **Next: Assign Security Groups**.

1. On the **Assign Security Groups** page, select the security group `pcf-tcp-elb-security-group` you configured in [Step 9: Configure a Security Group for the TCP ELB](#pcfaws-om-tcpelbsecgrp), and click **Next: Configure Security Settings**.

    <%= image_tag("../common/images/pcfaws/lb_assign_sec_groups.png") %>

1. On the **Configure Security Settings** page, ignore the **Improve you load balancer's security** error message and click **Next: Configure Health Check**.

1. On the **Configure Health Check** page, enter the following values:
  * **Ping Protocol**: Select `TCP`.
  * **Ping Port**: Set to `80`.
  * **Interval**: Set to `5` seconds. 
  * **Response Timeout**: Set to `3` seconds.
  * **Unhealthy threshold**: Set to `3`.
  * **Health threshold**: Set to `6`.

1. Click **Next: Add EC2 Instances**.

    <%= image_tag("../common/images/pcfaws/lb_health_check.png") %>

1. Accept the defaults on the **Add EC2 Instances** page and click **Next: Add Tags**.

1. Accept the defaults on the **Add Tags** page and click **Review and Create**.

1. Review and confirm the load balancer details, and click **Create**.


## <a id='pcfaws-dns'></a> Step 16: Configure DNS Records

1. Perform the following steps for all three of the load balancers you created in previous steps, named `pcf-web-elb`, `pcf-ssh-elb`, and `pcf-tcp-elb`:
  1. From the **Load Balancers** page, select the load balancer.
  1. On the **Description** tab, locate the **Basic Configuration** section and record the **DNS name** of the load balancer.

1. Click **Instances** on the left navigation to view your EC2 instances.

1. Select the `PcfOpsManInstance` instance created by Cloudformation.

1. On the **Description** tab, record the value for **IPv4 Public IP**.

1. Navigate to your DNS provider and create the following CNAME and A records:
  * CNAME: `*.apps.YOUR-SYSTEM-DOMAIN.com` and `*.system.YOUR-SYSTEM-DOMAIN.com` points to the DNS name of the `pcf-web-elb` load balancer.
  * CNAME: `ssh.YOUR-SYSTEM-DOMAIN.com` points to the DNS name of the `pcf-ssh-elb` load balancer.
  * CNAME: `tcp.YOUR-SYSTEM-DOMAIN.com` points to the DNS name of the `pcf-tcp-elb` load balancer.
  * A: `pcf.YOUR-SYSTEM-DOMAIN.com` points to the public IP address of the `pcf-ops-manager` EC2 instance.


## <a id='pcfaws-nat'></a> Step 17: Secure the NAT Instance

1. On the EC2 Dashboard, click **Instances**.

1. Select the NAT instance, which has an instance type of **t2.medium**.

1. From the **Actions** menu, select **Networking>Change Security Groups**.

1. Change the NAT security group from the default group to the `pcf-nat-security-group` NAT security group that you created in [Step 10: Configure a Security Group for the Outbound NAT](#pcfaws-om-natsecgrp).
    <%= image_tag("../common/images/pcfaws/pcf_aws_select_security_group.png") %>

1. Click **Assign Security Groups**.


## <a id='pcfaws-rds-subnet-group'></a> Step 18: Create RDS Subnet Group

1. Navigate to the RDS Dashboard.

1. Perform the following steps to create a RDS Subnet Group for the two RDS subnets:
    1. Click **Subnet Groups>Create DB Subnet Group**.
    1. Enter the following values:
        * **Name**: Enter `pcf-rds-subnet-group`.
        * **Description**: Enter a description to identify this subnet group.
        * **VPC ID**: Select `pcf-vpc`.
        * **Availability Zone** and **Subnet ID**: Choose the AZ and subnet for `pcf-rds-subnet-az0` and click **Add**.
    1. Repeat the steps above to add `pcf-rds-subnet-az1` and `pcf-rds-subnet-az2` to the group.
    1. Click **Create**.

    The following screenshot shows a completed subnet group.

    <%= image_tag("../common/images/pcfaws/rds_pcf_subnet_group.png") %>

    <p class="note"><strong>Note:</strong> On the Subnet Group page, you may need to refresh the page to view the new group.</p>


## <a id='pcfaws-mysql-rds'></a> Step 19: Create a MySQL Database Using AWS RDS

<p class="note"><strong>Note:</strong> You must have an empty MySQL database when you install or reinstall PCF on AWS.</p>

1. Navigate to the RDS Dashboard. 

1. Click **Instances>Launch DB Instance** to launch the wizard.

1. Select **MySQL**.

1. Select the **MySQL** radio button under **Production** to create a database for production environments. 

1. Click **Next Step**.

1. Specify the following database details:
    * **DB Instance Class**: Select **db.m3.large - 2 vCPU, 7.5 GiB RAM**.
    * **Multi-AZ Deployment**: Select **Yes**.
    * **Storage Type**: Select `Provisioned IOPS (SSD)`.
    * **Allocated Storage**: Enter **100&nbsp;GB**.
    * **DB Instance Identifier**: Enter `pcf-ops-manager-director`.
    * Enter a secure **Master Username** and **Master Password**.
          <p class="note"><strong>Note:</strong> Record the username and password. You need these credentials later when configuring the <strong>Director Config</strong> page in the BOSH Director tile.</p>
  <%= image_tag("../common/images/pcfaws/db_details.png") %>

1. Click **Next Step**.

1. On the **Configure Advanced Settings** page, enter the following values:
    * **VPC**: Select `pcf-vpc`.
    * **Subnet Group**: Select the `pcf-rds-subnet-group` you created in [Step 18: Create RDS Subnet Group](#pcfaws-rds-subnet-group).
    * **Publicly Accessible**: Select **No**.
    * **VPC Security Groups**: Select the `pcf-rds-security-group` that you created in [Step 11: Configure a Security Group for MySQL](#pcfaws-om-mysqlsecgrp).
    * **Database Name**: Enter `bosh`.
    * Accept the default values for the remaining fields.

	<%= image_tag("../common/images/pcfaws/advanced_db_settings.png") %>

1. Click **Launch DB Instance**. Launching the instance may take several minutes.

1. When the instance has launched, proceed to [Configuring BOSH Director on AWS](config-manual.html) to continue deploying PCF. 


## <a id='required-objects'></a> Required AWS Objects

This section describes the AWS objects you create in the procedures above in order to deploy PCF. 

Use this section to determine the resource requirements of PCF on AWS, or to verify that you created the correct resources after completing the procedures above.

### <a id='s3-buckets-om-pas'></a> S3 Buckets for Ops Manager and PAS

You must create the following S3 buckets from the S3 Dashboard:

* `pcf-ops-manager-bucket`  
* `pcf-buildpacks-bucket`
* `pcf-packages-bucket`
* `pcf-resources-bucket`
* `pcf-droplets-bucket`

These buckets must be empty when you install or reinstall PCF.

See [Step 2: Create S3 Buckets](#create-s3).

### <a id='iam-user-pcf'></a> IAM User for PCF

You must create an IAM user for PCF named `pcf-user` from the Identity and Access Management Dashboard, using the policy document included in the [Pivotal Cloud Foundry for AWS Policy Document](https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/customizing/policy-doc.html) topic.

See [Step 3: Create an IAM User for PCF](#create-iam).

### <a id='key-pair'></a> Key Pair

You must generate a key pair named `pcf-ops-manager-key`.
For more information about setting up a key pair, see [Amazon EC2 Key
Pairs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html)
in the AWS documentation.


### <a id='vpc'></a> VPC (Public and Private Subnets)

You must create a VPC with public and private subnets from the VPC Dashboard.

The following table lists the subnets in CIDR block `10.0.0.0/16`.

 <table>
 <tr>
   <th>Name</th>
   <th>AZ</th>
   <th>IPv4 CIDR block</th>
 </tr>
 <tr>
   <td>`pcf-public-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.0.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-public-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.1.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-public-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.2.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-management-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.16.0/28`</td>
 </tr>
 <tr>
   <td>`pcf-management-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.16.16/28`</td>
 </tr>
 <tr>
   <td>`pcf-management-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.16.32/28`</td>
 </tr>
 <tr>
   <td>`pcf-ert-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.4.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-ert-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.5.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-ert-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.6.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-services-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.8.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-services-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.9.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-services-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.10.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-rds-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.12.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-rds-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.13.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-rds-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.14.0/24`</td>
 </tr>
 </table>

See [Step 4: Create a VPC](#pcfaws-vpc).

### <a id='nat-instance'></a> NAT Instance

You must create a NAT instance when creating a VPC. The NAT instance must have the following configuration:

* **Instance type**: `t2.medium` 
* **Key pair name**: `pcf-ops-manager-key`
* **Enable DNS hostnames**: Yes 
* **Hardware tenancy**: Default

See [Step 4: Create a VPC](#pcfaws-vpc).

You must also assign the NAT instance to the `pcf-nat-security-group`. See [Step 17: Secure the NAT Instance](#pcfaws-nat).

### <a id='security-groups'></a> Security Groups

The following sections describe the security groups you must create from the EC2 Dashboard.

#### Ops Manager

The Ops Manager Security Group must be named `pcf-ops-manager-security-group` and have the following inbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th><strong>Source</strong></th>
</tr>
<tr>
  <td>HTTP</td>
  <td>TCP</td>
  <td>80</td>
  <td>My IP</td>
</tr>
<tr>
  <td>HTTPS</td>
  <td>TCP</td>
  <td>443</td>
  <td>My IP</td>
</tr>
<tr>
  <td>SSH</td>
  <td>TCP</td>
  <td>22</td>
  <td>My IP</td>
</tr>
<tr>
  <td>BOSH Agent</td>
  <td>TCP</td>
  <td>6868</td>
  <td>10.0.0.0/16</td>
</tr>
<tr>
  <td>BOSH Director</td>
  <td>TCP</td>
  <td>25555</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

See [Step 5: Configure a Security Group for Ops Manager](#pcfaws-om-secgrp).

#### PCF VMs

The PCV VMs Security Group must be named `pcf-vms-security-group` and have the following inbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>0 - 65535</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

See [Step 6: Configure a Security Group for PCF VMs](#pcfaws-om-ersecgrp).

#### Web ELB

The Web ELB Security Group must be named `pcf-web-elb-security-group` and have the following inbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>4443</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>HTTP</td>
  <td>TCP</td>
  <td>80</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>HTTPS</td>
  <td>TCP</td>
  <td>443</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

See [Step 7: Configure a Security Group for the Web ELB](#pcfaws-om-elbsecgrp).

#### SSH ELB

The SSH ELB Security Group must be named `pcf-ssh-elb-security-group` and have the following inbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>2222</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

The SSH ELB Security Group must have the following outbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

See [Step 8: Configure a Security Group for the SSH ELB](#pcfaws-om-sshelbsecgrp).

#### TCP ELB

The TCP ELB Security Group must be named `pcf-tcp-elb-security-group` and have the following inbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>1024 - 1123</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

The TCP ELB Security Group must have the following outbound rule:
<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

See [Step 9: Configure a Security Group for the TCP ELB](#pcfaws-om-tcpelbsecgrp).

#### Outbound NAT

The Outbound NAT Security Group must be named `pcf-nat-security-group` and have the following inbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

See [Step 10: Configure a Security Group for the Outbound NAT](#pcfaws-om-natsecgrp).

#### MySQL

The MySQL Security Group must be named `pcf-mysql-security-group` and have the following inbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>MySQL</td>
  <td>TCP</td>
  <td>3306</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

The MySQL Security Group must have the following outbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Destination</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

See [Step 11: Configure a Security Group for MySQL](#pcfaws-om-mysqlsecgrp).

### <a id='ops-manager-ami'></a> Ops Manager AMI

You must locate the public Ops Manager AMI using the AMI ID provided by the PDF downloaded when clicking **Pivotal Cloud Foundry Ops Manager for AWS** on Pivotal Network.

See [Step 12: Launch a Pivotal Ops Manager AMI](#pcfaws-om-ami).

### <a id='elbs'></a> ELBs

The following sections describe the ELBs you must create from the EC2 Dashboard.

#### Web ELB

You must create a web ELB with the following configuration:

* **Name**: `pcf-web-elb`
* **LB Inside**: `pcf-vpc`
* **Selected Subnet**: `pcf-public-subnet-az0`, `pcf-public-subnet-az1`, `pcf-public-subnet-az2`
* **Security Group**: `pcf-elb-security-group`
* **Health Check**: TCP Port 8080, Path: `/health`

See [Step 13: Create Web Load Balancer](#pcfaws-web-lb).

#### SSH ELB

* **Name**: `pcf-ssh-elb`
* **LB Inside**: `pcf-vpc`
* **Selected Subnet**: `pcf-public-subnet-az0`, `pcf-public-subnet-az1`, `pcf-public-subnet-az2`
* **Security Group**: `pcf-ssh-security-group`
* **Health Check**: TCP Port 2222

See [Step 14: Create SSH Load Balancer](#pcfaws-ssh-lb).

#### TCP ELB

* **Name**: `pcf-tcp-elb`
* **LB Inside**: `pcf-vpc`
* **Selected Subnet**: `pcf-public-subnet-az0`, `pcf-public-subnet-az1`, `pcf-public-subnet-az2`
* **Security Group**: `pcf-tcp-security-group`
* **Health Check**: TCP Port 80

See [Step 15: Create TCP Load Balancer](#pcfaws-tcp-lb).

### <a id='dns-config'></a> DNS Configuration

You must navigate to your DNS provider and create CNAME and A records for all three of your load balancers. 

See [Step 16: Configure DNS Records](#pcfaws-dns).

### <a id='rds-subnet-group'></a> RDS Subnet Group

You must create a subnet group for RDS named `pcf-rds-subnet-group` from the RDS Dashboard.

See [Step 18: Create RDS Subnet Group](#pcfaws-rds-subnet-group).

### <a id='mysql-db'></a> MySQL Database

You must create a MySQL database from the RDS Dashboard.

See [Step 19: Create a MySQL Database using AWS RDS](#pcfaws-mysql-rds).
